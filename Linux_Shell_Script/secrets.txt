#!/bin/bash

# A script to generate a random question for examination



submitinfo="    Please make sure that your script is adequately commented.
    The errors by system commands are not be shown on the screen.
    Please submit both the question and your script to bspujari@cms.unipune.ac.in"


function err() {
echo "Sorry something went wrong! Please rerun the script."
exit 1
}

function q0() {
cat > question.txt << EOF
Functions in the library files:

'nm' is a very powerful command. It can list all the symbols (functions) that
are burried in the library file. See for example following command:
    nm  /usr/lib/libblas.a
It produces the list of symbols (functions) in the library libblas.a.  
The library files are located in several locations, few of which are :
    /usr/lib/
    /lib/x86_64-linux-gnu/
    /usr/lib/x86_64-linux-gnu/

Our job is to find out the library file given the symbols. Please
note that the symbols that have "T" value in the third field are the 
relevent symbols in the present context. So write a script
that can search above three locations for the following symbols (with T value):
    ztpsv
    pthread_mutex_cond_lock
    gcry_mpi_mul
    Curl_input_ntlm
    zdfps

The output should look something like this:
----
'ztpsv' symbol is declared in  /usr/lib/libblas.a 
----
If the symbol is not found anywhere, the script should report so.
  
$submitinfo

EOF
}

function q1() {
cat > cpuinfo.ref <<EOF
processor	: 0
vendor_id	: GenuineIntel
cpu family	: 6
model		: 26
model name	: Intel(R) Xeon(R) CPU           E5540  @ 2.53GHz
stepping	: 5
cpu MHz		: 2533.494
cache size	: 8192 KB
physical id	: 0
siblings	: 8
core id		: 0
cpu cores	: 4
apicid		: 0
fpu		: yes
fpu_exception	: yes
cpuid level	: 11
wp		: yes
flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm syscall nx rdtscp lm constant_tsc ida nonstop_tsc pni monitor ds_cpl vmx est tm2 ssse3 cx16 xtpr sse4_1 sse4_2 popcnt lahf_lm
bogomips	: 5066.98
clflush size	: 64
cache_alignment	: 64
address sizes	: 40 bits physical, 48 bits virtual
power management: [8]

processor	: 1
vendor_id	: GenuineIntel
cpu family	: 6
model		: 26
model name	: Intel(R) Xeon(R) CPU           E5540  @ 2.53GHz
stepping	: 5
cpu MHz		: 2533.494
cache size	: 8192 KB
physical id	: 0
siblings	: 8
core id		: 2
cpu cores	: 4
apicid		: 4
fpu		: yes
fpu_exception	: yes
cpuid level	: 11
wp		: yes
flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm syscall nx rdtscp lm constant_tsc ida nonstop_tsc pni monitor ds_cpl vmx est tm2 ssse3 cx16 xtpr sse4_1 sse4_2 popcnt lahf_lm
bogomips	: 5067.03
clflush size	: 64
cache_alignment	: 64
address sizes	: 40 bits physical, 48 bits virtual
power management: [8]

processor	: 2
vendor_id	: GenuineIntel
cpu family	: 6
model		: 26
model name	: Intel(R) Xeon(R) CPU           E5540  @ 2.53GHz
stepping	: 5
cpu MHz		: 2533.494
cache size	: 8192 KB
physical id	: 0
siblings	: 8
core id		: 1
cpu cores	: 4
apicid		: 2
fpu		: yes
fpu_exception	: yes
cpuid level	: 11
wp		: yes
flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm syscall nx rdtscp lm constant_tsc ida nonstop_tsc pni monitor ds_cpl vmx est tm2 ssse3 cx16 xtpr sse4_1 sse4_2 popcnt lahf_lm
bogomips	: 5066.73
clflush size	: 64
cache_alignment	: 64
address sizes	: 40 bits physical, 48 bits virtual
power management: [8]

processor	: 3
vendor_id	: GenuineIntel
cpu family	: 6
model		: 26
model name	: Intel(R) Xeon(R) CPU           E5540  @ 2.53GHz
stepping	: 5
cpu MHz		: 2533.494
cache size	: 8192 KB
physical id	: 0
siblings	: 8
core id		: 3
cpu cores	: 4
apicid		: 6
fpu		: yes
fpu_exception	: yes
cpuid level	: 11
wp		: yes
flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm syscall nx rdtscp lm constant_tsc ida nonstop_tsc pni monitor ds_cpl vmx est tm2 ssse3 cx16 xtpr sse4_1 sse4_2 popcnt lahf_lm
bogomips	: 5066.73
clflush size	: 64
cache_alignment	: 64
address sizes	: 40 bits physical, 48 bits virtual
power management: [8]

processor	: 4
vendor_id	: GenuineIntel
cpu family	: 6
model		: 26
model name	: Intel(R) Xeon(R) CPU           E5540  @ 2.53GHz
stepping	: 5
cpu MHz		: 2533.494
cache size	: 8192 KB
physical id	: 0
siblings	: 8
core id		: 0
cpu cores	: 4
apicid		: 1
fpu		: yes
fpu_exception	: yes
cpuid level	: 11
wp		: yes
flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm syscall nx rdtscp lm constant_tsc ida nonstop_tsc pni monitor ds_cpl vmx est tm2 ssse3 cx16 xtpr sse4_1 sse4_2 popcnt lahf_lm
bogomips	: 5066.74
clflush size	: 64
cache_alignment	: 64
address sizes	: 40 bits physical, 48 bits virtual
power management: [8]

processor	: 5
vendor_id	: GenuineIntel
cpu family	: 6
model		: 26
model name	: Intel(R) Xeon(R) CPU           E5540  @ 2.53GHz
stepping	: 5
cpu MHz		: 2533.494
cache size	: 8192 KB
physical id	: 0
siblings	: 8
core id		: 2
cpu cores	: 4
apicid		: 5
fpu		: yes
fpu_exception	: yes
cpuid level	: 11
wp		: yes
flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm syscall nx rdtscp lm constant_tsc ida nonstop_tsc pni monitor ds_cpl vmx est tm2 ssse3 cx16 xtpr sse4_1 sse4_2 popcnt lahf_lm
bogomips	: 5066.94
clflush size	: 64
cache_alignment	: 64
address sizes	: 40 bits physical, 48 bits virtual
power management: [8]

processor	: 6
vendor_id	: GenuineIntel
cpu family	: 6
model		: 26
model name	: Intel(R) Xeon(R) CPU           E5540  @ 2.53GHz
stepping	: 5
cpu MHz		: 2533.494
cache size	: 8192 KB
physical id	: 0
siblings	: 8
core id		: 1
cpu cores	: 4
apicid		: 3
fpu		: yes
fpu_exception	: yes
cpuid level	: 11
wp		: yes
flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm syscall nx rdtscp lm constant_tsc ida nonstop_tsc pni monitor ds_cpl vmx est tm2 ssse3 cx16 xtpr sse4_1 sse4_2 popcnt lahf_lm
bogomips	: 5066.72
clflush size	: 64
cache_alignment	: 64
address sizes	: 40 bits physical, 48 bits virtual
power management: [8]

processor	: 7
vendor_id	: GenuineIntel
cpu family	: 6
model		: 26
model name	: Intel(R) Xeon(R) CPU           E5540  @ 2.53GHz
stepping	: 5
cpu MHz		: 2533.494
cache size	: 8192 KB
physical id	: 0
siblings	: 8
core id		: 3
cpu cores	: 4
apicid		: 7
fpu		: yes
fpu_exception	: yes
cpuid level	: 11
wp		: yes
flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm syscall nx rdtscp lm constant_tsc ida nonstop_tsc pni monitor ds_cpl vmx est tm2 ssse3 cx16 xtpr sse4_1 sse4_2 popcnt lahf_lm
bogomips	: 5066.73
clflush size	: 64
cache_alignment	: 64
address sizes	: 40 bits physical, 48 bits virtual
power management: [8]

EOF

cat > question.txt <<EOF

Comparison of CPUs.

A lot of information of computer's processors is stored at: /proc/cpuinfo.
Please open the file and have a look at it. It contains the information about
the Processors and  speed, cache, supported flags etc for EACH processor. As a
result same fields are repeated multiple times. Every machine has such a file.
Now in the present directory you have also given a reference file (called
'cpuinfo.ref') containing the info of some other machine. The job is to compare
this reference file with your '/proc/cpuinfo'. 

Please write a script to:
1) count how many processors are there in both the files, and
2) compare the supported flags and find out the flags that are NOT common in both files.

Your output should look something like this:
------
Reference file has 4 processors, local machine has 2 processors.
The flags that are not common are : sep xtpr lahf
------

$submitinfo

EOF

}

function q2() {
cat > question.txt << EOF
Multi program generation and compilation

We want to write a C-program to that prints a line 'hello world N', where 'N'
is a predefined number to be hard-coded in the code. Now the number N is
arbitrarily taken from the user. Now the job is to change this number of the
fly and recompile/execute the code. For example, if the input range in from 1
to 10 then the program should be compiled 10 times by chaging N from 1 to 10.
This is how you should proceed:
1) Write a C-program that has a number N hard-coded. 
2) Writa a shell script to read the two numbers defining range (eg: 1 and 10). 
3) Make sure that the inputs are integers and first number is smaller than the second
4) The script should contain the for loop defined by the input range
5) In the loop, for i-th iteration the C-code should be changed to replace N by i
6) Compile the code and execute it

Final output should look something like this:
------
Hello world 1
Hello world 2
Hello world 3
.
.
.
-------
The 'Hello world' string should come from C-program.

$submitinfo
EOF
}
function q3() {
cat > question.txt <<EOF
The Independence Day

India became independent nation on 15th Aug 1947, which was on Friday. You can
cross-check it with 'cal' command. We want to find out how common is it for
15th August to be on Friday. 

Write script to search the years from AD 1400 to 2016 and count how many times 
15th Aug appears on Friday. Also print first and last 5 matching years.

Final output should look like this:
-----
There are total 99 instances of 15th Aug on Friday. Here are first and last 5 years:
1404
1410
1421
1427
1432
1986
1997
2003
2008
2014
-----
$submitinfo 
EOF
}
function q4() {
cat > question.txt <<EOF
Machine status

It is sometime helpful to find out the status of the computer that you're using.
There are several tools to do the same. For example the 'ps aux' command
displays all the processes that going on on the computer including their STATus.
On the other hand 'free' command gives the details of the memory (RAM), and 'w'
command tells you who are logged in on machine.

The goal of your script is to  display the machine's status showing the details
of various components. The output should look something like this:
------
There are total 100 processes out of which  10 are Running. 
Out of 3873 MB RAM 1079 is used, 104 MB is buffered, and 2793 MB is free.
There are 2 users logged in.
---------------------

$submitinfo



EOF
}
function q5() {
cat > question.txt <<EOF
GNUPLOT for plotting

The goal of this script is to use 'gnuplot' for plotting. Write a script
to:
1) read two numbers defining the range (e.g 1 to 10). 
2) Make sure that they are integers and first number is smaller than the second. 
3) Write a loop to square those numbers and store them in a file in a column
4) Use gnuplot to plot the content of the file

$submitinfo
EOF
}
function q6() {
cat > question.txt <<EOF
User processes 

Typically a lot of processes are being run on your computer by various users.
Some of them are human users and some of them are computer generated users.  A
command like 'ps aux' can give the details on each process running on the
computer.  The goal of this program is to find out who all are running the
processes.  Write a script to find out how may users are running the processes
and how many processes each.

You output may look like this:
-----
There are total 202 processes going on. 
3 users are running the processes, with following details:
USER   - Processes
root  - 100 
www  - 2 
guest - 100
-------------------------------

$submitinfo
EOF
}
function q7() {
cat > question.txt <<EOF
Read forever!

Sometime you mave have to take the input from the user for reallly long time.
For example in the game of Prisoners' Dilemma you can keep on taking the input
forever. The task of your script is to mimic such a situtation. 

Write a script to:
 1) read the input from the user (either 'C' or 'D'), 
 2) generate your choice ('C' or 'D') the way you want it. 
 3) Compute and print the score using pay-off matrix given below
 4) continue steps 1 to 3 till user enters anything other than 'C' or 'D'

 Payoff matrix:
                      Player 1
                 |   C           D
             ----|----------------------       
             C   | (3,3)       (0,5)
Player2          |
             D   | (5,0)       (1,1)


Your output may look like this:
--------------------
What's your choise? (C/D):
You entered C, my choice C. Therefore score is : (3,3). Its a tie.
What's your choise? (C/D):
You entered C, my choice D. Therefore score is : (0,5). I win.
....
--------------------


      
$submitinfo
EOF
}
function q8() {
cat > question.txt <<EOF
Grep Forever

Often one may have to search for a string one after another. The task that you
have is to design a script that keeps taking a word at a time from the user and
search it in the directory "/etc/". So roughly the script should do the
following:
    1) Take the input from the user (a string)
    2) search the string in '/etc/' directory (but not in its subcirectorues)
    3) Count the number of lines the string matches
    4) repeat steps 1 to 3 till the user enters either of these string : "EXIT", "exit", or "Exit"

$submitinfo
EOF

}
function q9() {
cat > question.txt <<EOF
Adjusting screen brightness

The screen brightness can be adjusted using a command. See for example
    xrandr  --output VGA1 --brightness .5
The last number manages the brightness and it ranges from 0 to 1. Now your task
is to design a script to set the brightness at 0.5 at the begining and ask user
if the it is apropriately bright. Depending on the input by the user increase
or decrease the brightness. Repeat the process untill user says 'exit'.  Note
that brigthness value of 0 will make screen completely disappear.  Therefore
you should avoid the value 0.

$submitinfo
EOF
}
function q10() {
cat > question.txt <<EOF
Guess the password

Password are stored in computer in text format but not the human readable. 
There are variety of ways to encrpyt and store the password. Here we'll try 
to demostrate the most simple (but useless) way to encrypt the password and
store it in a file.

The most primitive way to encript a password is to convert it in hexadecimal.
See for example: 
    echo hello | hexdump -v -e '/1 "%02X"' ; echo
Above command changes the string "hello" to its HEX format.

Write a script to:
    1) convert any desired string as a password to HEX format and store it in a file
    2) ask user to guess the password 
    3) compare the user input with the password in the file
    4) tell user if the password match or not
    

$submitinfo
EOF
}
function q11() {

cat > question.txt <<EOF
Prime numbers

Generate first 20 prime numbers, store them in a file and
view them using gnuplot.

$submitinfo
EOF
}
function q12() {
cat > question.txt <<EOF
Long file generation

The goal of this script is to create a file till it reaches a certain size.
Write a script to:
  1) create a file 
  2) add some string in the file 
  3) calcualte the size
  4) if the size is less than 16KB go to step 2 else proceed
  5) print how many letters the file has.


$submitinfo
EOF
}
function q13() {
cat > question.txt <<EOF
Password file analysis

The information of users is stored in /etc/passwd. Write a script
to find out how many users do not have "/bin/bash" as theor shell
and print their names.

Your outout should look something like this:
-----
There are 2 users without /bin/bash. They are-
USERNAME    |    NAME
------------|-----------------------
avahi       |    Avahi mDNS daemon
lightdm     |    Light Display Manager




$submitinfo
EOF
}
function q14() {
echo "This is question 1"
cat > question.txt <<EOF

$submitinfo
EOF
}
function q15() {
echo "This is question 1"
cat > question.txt <<EOF

$submitinfo
EOF
}

function generate_question(){

id=$1

q${id} 2>/dev/null

if [ $? -ne 0 ] ;then 
    err
fi


}



lockfile="${HOME}/.examlockMar2016"
if [ -e $lockfile ] ; then
    echo "Sorry you can not change your question! Your original file will be restored"
#    read ans
    if [ ! -s question.txt ] ; then
        code_id=`cat $lockfile`
        generate_question $code_id
        if [ $? -ne 0 ] ; then
            err
        else
            echo
            echo "DONE! Your question is ready in the file : question.txt"
            echo "Good luck!"
        fi
    else
        echo 'Good bye!'
    fi

    exit
fi

keepreading="F"

max_rollno=20
max_question=14

#while [ $keepreading == "F" ] ; do
#    echo "Please enter last two digits of your roll number:"
#    read r_int
#
#    if [ ${r_int} -lt 1 -o ${r_int} -gt $max_rollno ] ; then
#        echo "Sorry wrong integer! Try again"
#    else
#        keepreading="T"
#    fi
#done
      

#sec=`date   +%-S`

#seed=$(($r_int + $sec))

#code_id=$(( 13*$seed/90  ))

code_id=$[  $[ RANDOM % $max_question ] ]

echo $code_id

#exit


generate_question $code_id

echo 


echo "DONE! Your question is ready in the file : question.txt"
echo "Good luck!"
echo $code_id > $lockfile 


